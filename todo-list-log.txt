# Nginx 로그 시스템 구축을 위한 Todo List

## [완료] 단계 1: Nginx 로그 생성 및 저장 설정 (기반 구축)

**진행 상황: 완료 (2025-09-24)**
- `backend/docker-compose.yml`에 Nginx 컨테이너와 호스트 간의 볼륨 마운트 (`./log/nginx:/var/log/nginx`) 설정을 완료했습니다.
- 호스트 EC2 서버의 `backend/log/nginx` 디렉토리 생성을 완료했습니다.

### 1-1. docker-compose.yml 파일 수정
- **목표:** Nginx 컨테이너의 로그를 호스트(EC2) 서버에 저장하기 위해 볼륨을 마운트합니다.
- **대상 파일:** `backend/docker-compose.yml`
- **수정 내용:** `nginx` 서비스 섹션에 `volumes` 항목을 추가합니다.
  - `- ./log/nginx:/var/log/nginx` 라인을 추가합니다.

### 1-2. 호스트에 로그 디렉토리 생성
- **목표:** Docker가 볼륨을 마운트할 호스트 측 디렉토리를 미리 생성합니다.
- **실행 위치:** `./backend` 디렉토리 내부
- **실행 명령어:** `mkdir -p log/nginx`

### 1-3. Nginx 설정 파일(default.conf) 수정
- **목표:** 로그를 구조화된 JSON 형식으로 기록하도록 Nginx의 로그 포맷을 정의하고 적용합니다.
- **대상 파일:** `backend/nginx/default.conf`
- **수정 내용:**
    1. `server` 블록 외부에 `log_format` 지시어를 사용하여 `json_analytics` 라는 이름의 새 포맷을 추가합니다.
    2. `server` 블록 내부의 `access_log` 지시어를 수정하여, 새로 정의한 `json_analytics` 포맷을 사용하도록 변경하고, 로그 파일 이름을 날짜별로 동적으로 생성하도록 설정합니다.
       - 예: `access_log /var/log/nginx/access-$logdate.log json_analytics;`

---

## [완료] 단계 2: 로그 처리 및 알림 시스템 구축

**논의된 내용 (2025-09-24):**
- **로그 파일 형식:** API별로 파일을 분리하는 대신, **날짜별로 단일 로그 파일을 생성**하기로 결정했습니다. (예: `access-2025-09-24.log`)
- **로그 처리 방식:** ELK, EFK와 같은 전문 솔루션 대신, 빠른 구현을 위해 **사용자 정의 스크립트(Python 등)를 작성**하는 방식으로 진행하기로 결정했습니다.

### 2-1. 로그 처리 방식 결정 (완료)
- **결정:** 사용자 정의 스크립트 (Python 권장)

### 2-2. 로그 처리기 구현 (스크립트 방식 기준)
- **진행 상황:**
  - **(완료)** `backend/log_processor.py` 스크립트 작성 완료 (2025-09-24)
    - **기능:** 특정 날짜의 로그 파일을 읽어 5xx 에러를 감지하고, 포맷된 메시지를 Slack으로 전송합니다. 환경 변수(`SLACK_WEBHOOK_URL`)를 사용합니다.
- **목표:** 날짜별 로그 파일을 주기적으로 읽고, 내용을 파싱하여 조건에 따라 알림을 전송하는 스크립트를 작성합니다.
- **세부 작업:**
  1. **(완료)** **로그 파일 감지/선택:** 특정 날짜의 로그 파일을 대상으로 작업하도록 구현합니다.
  2. **(완료)** **JSON 파싱:** 파일에서 읽어온 각 로그 라인(문자열)을 JSON 객체로 변환합니다.
  3. **(완료)** **조건부 필터링:** HTTP 상태 코드가 5xx인 에러 로그를 필터링합니다.

### 2-3. 알림 기능 구현
- **목표:** 필터링된 로그 내용을 Slack으로 전송합니다.
- **세부 작업:**
  1. **(완료)** **Slack Webhook URL 확보 및 테스트:**
     - **진행 상황:** 완료 (2025-09-24)
     - **내용:** Slack 알림 채널을 생성하고 Webhook URL을 발급받았습니다. `curl` 명령어를 통해 메시지 전송 테스트를 완료했습니다.
  2. **(완료)** **보안 (환경 변수 사용):**
     - **진행 상황:** 완료 (2025-09-24)
     - **내용:** `log_processor.py`가 `os.getenv("SLACK_WEBHOOK_URL")`를 통해 환경 변수에서 Webhook URL을 읽어오도록 구현되어 있습니다.
  3. **(완료)** **API 호출 로직 구현:**
     - **진행 상황:** 완료 (2025-09-24)
     - **내용:** `log_processor.py`에 5xx 에러 발생 시 `requests` 라이브러리를 사용하여 Slack으로 포맷된 메시지를 전송하는 `send_notification` 함수가 구현되어 있습니다.

### 2-4. 로그 처리기 배포 및 실행 (완료)
- **진행 상황:** 완료 (2025-09-25)
- **목표:** 작성된 로그 처리 스크립트를 서버에서 안정적으로 실행시킵니다.
- **방법:**
  - **(적용됨)** **Docker 컨테이너화:** `docker-compose.yml`에 `log-processor` 서비스를 추가하여 컨테이너로 관리합니다.
  - **실행 방식:** 컨테이너 내부에서 무한 루프(`while true`)를 통해 10분 간격으로 `log_processor.py`를 실행합니다.
  - **배포 방식:** GitHub Actions가 배포 시 `docker-compose`를 통해 자동으로 `log-processor` 컨테이너를 실행시키며, GitHub Secrets로부터 `SLACK_WEBHOOK_URL`을 주입합니다.

---

## [완료] 단계 3: 검증, 문제 해결 및 배포 자동화

**진행 기록 및 문제 해결 (2025-09-25):**
- **문제 1:** `access-YYYY-MM-DD.log` 파일 미생성.
  - **원인:** Nginx `map` 지시어 정규식 호환성 문제.
  - **해결:** `default.conf`에서 위치 기반 캡처 그룹(`$1`)을 사용하도록 수정했습니다.
- **문제 2:** 로그 파일 생성 시 `Permission denied` 오류 발생.
  - **원인:** Docker 컨테이너의 Nginx 프로세스 권한 부족.
  - **해결:** `deploy.sh`에 `mkdir -p log/nginx && chmod 777 log/nginx`를 추가하여 배포 시 자동화했습니다.
- **문제 3:** `log-processor` 컨테이너가 `SLACK_WEBHOOK_URL` 환경 변수를 읽지 못함.
  - **원인:** `deploy.sh`가 `backend` 디렉토리에서 `docker-compose`를 실행하는데, `docker-compose.yml`의 `env_file: .env`가 `backend/.env`를 참조함. 하지만 최신 `.env` 파일은 상위 디렉토리에 생성되고 있었음. 즉, 오래된 `backend/.env` 파일을 참조하여 발생한 문제.
  - **해결:** `docker-compose.yml`의 모든 `env_file` 경로를 `../.env`로 수정하여 상위 디렉토리의 최신 `.env` 파일을 명시적으로 참조하도록 변경했습니다.
- **결과:** `git push`로 배포 후, 날짜 기반 로그 파일 정상 생성 및 `log-processor`의 환경 변수 정상 인식 확인.

---

### (기록) 3-1. Docker 컨테이너 재시작
- **목표:** `docker-compose.yml`과 `default.conf`의 변경사항을 적용합니다.
- **실행 명령어:** `docker-compose down && docker-compose up -d --build`

### (기록) 3-2. 테스트 트래픽 발생
- **목표:** 로그가 정상적으로 쌓이는지 확인하기 위해 서버에 여러 종류의 API 요청을 보냅니다.
- **방법:** `curl` 명령어나 Postman 같은 API 테스트 도구를 사용합니다.

### (기록) 3-3. 로그 파일 확인
- **목표:** 호스트에 마운트된 로그 파일의 내용을 확인합니다.
- **실행 명령어:** `cat backend/log/nginx/access-YYYY-MM-DD.log`
- **검증 사항:** 로그가 정의한 JSON 형식으로 기록되는지, 날짜별로 파일이 생성되는지 확인합니다.

### (기록) 3-4. (단계 2 구현 후) 알림 테스트
- **목표:** 알림 조건에 해당하는 요청을 보내고, 실제로 Slack/Notion에 메시지가 오는지 확인합니다.
- **방법:** 의도적으로 500 에러를 유발하거나, 알림을 보내기로 설정한 특정 API를 호출합니다.