# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: CI/CD for On-premise Webservice

# 워크플로우가 시작될 조건을 지정합니다.
on:
  # 'main' 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches: [ "main" ]

# 워크플로우에서 실행될 작업(job)들을 정의합니다.
jobs:
  # 1. CI: Docker 이미지를 빌드하고 Docker Hub에 푸시하는 작업
  build-and-push:
    # 이 작업이 실행될 가상 환경을 지정합니다. (최신 우분투)
    runs-on: ubuntu-latest
    steps:
      # 1-1. 소스 코드 체크아웃
      # GitHub Repository에 있는 코드를 가상 환경으로 가져옵니다.
      - name: Checkout source code
        uses: actions/checkout@v4

      # 1-2. Docker Hub 로그인
      # GitHub Secrets에 저장된 Docker Hub 계정 정보를 사용하여 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 1-3. Docker 이미지 빌드 및 푸시
      # Dockerfile을 사용하여 이미지를 빌드하고, Docker Hub에 푸시합니다.
      # 이미지 태그는 고유성을 위해 Git 커밋 해시(SHA)를 사용합니다.
      - name: Build and push Docker image
        run: |
          cd backend
          docker buildx build --file Dockerfile \
            --tag ${{ secrets.DOCKER_USERNAME }}/onpremise-webservice:${{ github.sha }} \
            --push .

  # 2. CD: 운영 서버에 접속하여 최신 버전으로 배포하는 작업
  deploy:
    # 'build-and-push' 작업이 성공적으로 완료되어야 이 작업이 실행됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 2-1. .env 파일 생성
      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

      # 2-2. .env 파일을 서버로 복사
      - name: Copy .env file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env"
          target: "/home/${{ secrets.SSH_USERNAME }}/onpremise-webservice/backend"

      # 2-3. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2-4. 배포 스크립트 실행
      - name: Execute deployment script
        run: |
          # 1단계: Git Clone 또는 Pull을 수행하는 명령
          GIT_COMMAND="if [ ! -d 'onpremise-webservice' ]; then git clone https://github.com/${{ github.repository }}.git onpremise-webservice; else cd onpremise-webservice && git pull origin main; fi"
          
          # 1단계 실행
          aws ssm send-command --instance-ids "${{ secrets.AWS_INSTANCE_ID }}" --document-name "AWS-RunShellScript" --parameters "{\"workingDirectory\":[\"/home/${{ secrets.SSH_USERNAME }}\"],\"commands\":[\"$GIT_COMMAND\"]}" --output text > /dev/null
          sleep 5 # Git 작업이 완료될 시간을 줍니다.

          # 2단계: 배포 스크립트 실행
          DEPLOY_COMMAND="cd /home/${{ secrets.SSH_USERNAME }}/onpremise-webservice/backend && export GITHUB_SHA=${{ github.sha }} && bash deploy.sh"
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.AWS_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "{ \"commands\":[\"$DEPLOY_COMMAND\"] }" \
            --output text --query "Command.CommandId")

          echo "SSM Command ID: $COMMAND_ID"

          # 명령이 끝날 때까지 대기하고, 실패 시 로그를 가져옵니다.
          if ! aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.AWS_INSTANCE_ID }}"; then
            echo "--- Deployment failed. Fetching logs from /tmp/deploy.log ---"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.AWS_INSTANCE_ID }}" \
              --query "StandardOutputContent" \
              --output text
            exit 1
          fi

          echo "### Deployment command sent and executed successfully."