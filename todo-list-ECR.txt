# To-Do List: Docker Hub에서 AWS ECR로 마이그레이션

Docker Hub 장애에 대응하고 안정적인 배포 환경을 구축하기 위해, 컨테이너 이미지 저장소를 AWS ECR (Elastic Container Registry)로 전환합니다.

## 1. AWS ECR 리포지토리 생성 (AWS Console)

- **목표:** Docker 이미지를 저장할 ECR 리포지토리를 생성합니다.
- **방법:**
    1. AWS Management Console에 로그인합니다.
    2. 서비스 검색창에서 "ECR"을 검색하고 "Elastic Container Registry"로 이동합니다.
    3. "리포지토리 생성" 버튼을 클릭합니다.
    4. 리포지토리 이름을 `onpremise-webservice` (기존 이미지 이름과 유사하게)로 설정하고, 다른 설정은 기본값으로 둡니다.
    5. 리포지토리를 생성하고, 생성된 리포지토리의 **URI**를 복사해둡니다. (예: `123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/onpremise-webservice`)

## 2. GitHub Actions 워크플로우 수정 (`.github/workflows/main.yml`)

- **목표:** GitHub Actions가 Docker Hub 대신 ECR에 이미지를 빌드하고 푸시하도록 수정합니다.
- **사전 작업: GitHub Secrets 설정**
    1. ECR에 접근할 수 있는 권한을 가진 IAM 사용자를 생성합니다. (`AmazonEC2ContainerRegistryPowerUser` 정책을 권장합니다.)
    2. 생성된 IAM 사용자의 `Access key ID`와 `Secret access key`를 발급받습니다.
    3. GitHub 리포지토리의 `Settings` > `Secrets and variables` > `Actions`로 이동합니다.
    4. 다음 세 가지 Repository secrets를 추가합니다.
        - `AWS_ACCESS_KEY_ID`: 발급받은 Access key ID
        - `AWS_SECRET_ACCESS_KEY`: 발급받은 Secret access key
        - `AWS_REGION`: ECR 리포지토리를 생성한 리전 (예: `ap-northeast-2`)

- **방법: `main.yml` 파일 수정**
    1. **AWS ECR 로그인 단계 추가:** 기존 `docker/login-action`을 ECR 로그인으로 교체합니다.
    2. **이미지 태그 수정:** Docker 이미지 태그에 ECR 리포지토리 URI를 사용하도록 수정합니다.

    ```yaml
    # .github/workflows/main.yml 예시 수정안

    # ... (기존 설정)

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: onpremise-webservice # 1단계에서 생성한 리포지토리 이름
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    ```

## 3. `docker-compose.yml` 수정

- **목표:** `docker-compose`가 Docker Hub가 아닌 ECR에서 이미지를 가져오도록 수정합니다.
- **방법:**
    1. `backend/docker-compose.yml` 파일을 엽니다.
    2. `my-api` 서비스의 `image` 필드를 ECR 리포지토리 URI로 변경합니다. 이 때, 태그는 배포 시점에 동적으로 주입받아야 하므로 변수를 사용합니다.

    ```yaml
    # backend/docker-compose.yml 예시 수정안

    services:
      my-api:
        # image: gpdus4605/onpremise-webservice:${TAG} # 기존 설정
        image: ${ECR_IMAGE_URI} # ECR URI를 변수로 받도록 변경
        # ... (나머지 설정)
    ```

## 4. EC2 배포 스크립트 수정 (`backend/deploy.sh`)

- **목표:** EC2 인스턴스가 ECR에서 이미지를 pull 받을 수 있도록 인증 과정을 추가하고, 동적 이미지 URI를 전달합니다.
- **사전 작업: EC2 인스턴스에 IAM 역할 부여**
    1. EC2 인스턴스가 ECR 이미지를 읽을 수 있는 권한 (`AmazonEC2ContainerRegistryReadOnly`)을 가진 IAM 역할을 생성합니다.
    2. EC2 인스턴스 관리 페이지에서 해당 인스턴스에 생성한 IAM 역할을 연결합니다. (이 방법을 사용하면 EC2 내에 별도의 AWS 자격증명을 저장할 필요가 없어 안전합니다.)

- **방법: `deploy.sh` 파일 수정**
    1. `docker-compose pull` 또는 `docker-compose up`을 실행하기 전에 ECR에 로그인하는 명령어를 추가합니다.
    2. GitHub Actions에서 전달받은 이미지 URI를 `docker-compose`에 환경변수로 전달합니다.

    ```bash
    # backend/deploy.sh 예시 수정안

    #!/bin/bash

    # GitHub Actions에서 SSH를 통해 전달받은 ECR 이미지 URI
    ECR_IMAGE_URI=$1 

    # AWS CLI가 설치되어 있는지 확인 및 설치
    if ! command -v aws &> /dev/null
    then
        echo "AWS CLI not found, installing..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    fi

    # 리전 및 ECR 주소 추출
    AWS_REGION=$(echo $ECR_IMAGE_URI | cut -d'.' -f4)
    ECR_REGISTRY=$(echo $ECR_IMAGE_URI | cut -d'/' -f1)

    # ECR 로그인
    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    # docker-compose.yml에서 사용할 수 있도록 ECR_IMAGE_URI 변수 export
    export ECR_IMAGE_URI

    # docker-compose 실행
    # docker-compose.yml 파일의 정확한 경로를 지정해야 합니다.
    COMPOSE_FILE="/home/ubuntu/onpremise-webservice/backend/docker-compose.yml"
    
    docker-compose -f $COMPOSE_FILE pull my-api
    docker-compose -f $COMPOSE_FILE up -d --no-deps my-api

    echo "Deployment completed with image: $ECR_IMAGE_URI"
    ```

## 5. 변경사항 커밋 및 푸시

- **목표:** 수정된 `.github/workflows/main.yml`, `backend/docker-compose.yml`, `backend/deploy.sh` 파일을 리포지토리에 반영하여 새로운 CI/CD 파이프라인을 트리거합니다.
- **방법:**
    1. `git add .github/workflows/main.yml backend/docker-compose.yml backend/deploy.sh`
    2. `git commit -m "feat: Migrate to AWS ECR for container registry"`
    3. `git push origin main`

이 과정을 통해 Docker Hub에 대한 의존성을 제거하고, AWS 생태계 내에서 더 안정적이고 빠른 컨테이너 배포 환경을 구축할 수 있습니다.
